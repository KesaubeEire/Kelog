<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Longterm on Kesa-Kelog</title>
    <link>/tags/longterm/</link>
    <description>Recent content in Longterm on Kesa-Kelog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/longterm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>🎮Game#ERROR_AI</title>
      <link>/2018/03/19/game-error-ai/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/19/game-error-ai/</guid>
      <description> Log in GameMade  18.3.19  A:找美术资源  放弃像素风,转到low-poly  B:找UI资源  Sci Fi UI  C:找代码漏洞  找几个包,有fps的,提前告诉我,我下载好    </description>
    </item>
    
    <item>
      <title>⭐️Tech#重学CSS_02</title>
      <link>/2018/03/16/tech-css-02/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/16/tech-css-02/</guid>
      <description>写在前面 目前没有想好多长时间换一次这个版面
大概是一周新开一个CSS的网页吧
那么我就得赶快搞出来咯
基于Tag或者自己往进填链接的方式
估计也就是大概在两周之内学到那个部分吧
噶油
重点提点  CSS的垂直居中问题
日志 18.3.20 end at 172
 一大堆各种初级语法的学习,略  转义 字符串  +号 连接 .length 字符串长度 JS只有字符串类型,没有字符类型,获取字符使用&amp;rdquo;字符串变量[索引]&amp;ldquo;的形式 字符串不可变,不能利用索引更改某个索引的值来改变整个字符串,改变整个字符串的唯一方法是重新赋值给该字符串变量  数组  &amp;ldquo;以左方括号[开始定义一个数组，以右方括号]结束定义，并把每个条目之间用逗号隔开&amp;rdquo;
var sandwich = [&amp;quot;peanut butter&amp;quot;, &amp;quot;jelly&amp;quot;, &amp;quot;bread&amp;quot;] 多维数组即 [[23],[12],[312],[[21],[321]]]酱紫的    18.3.19 正式开始学习JS
 JS  注释: //(单行) &amp;amp; /**/(多行) 数据类型  undefined（未定义）
null（空）
boolean（布尔型）
string（字符串）
symbol(符号)
number（数字）
object（对象）
  变量 var  类型: 命名:Variable(变量)的名字可以由数字、字母、$或者 _组成,但是不能包含空格或者以数字为首。 各种加减乘除余数 += -= *= /=    18.</description>
    </item>
    
    <item>
      <title>⭐️Tech#重学CSS_01</title>
      <link>/2018/03/12/tech-css/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/12/tech-css/</guid>
      <description>飞到日志部分
补充 因为学的东西越来越多了
所以不得已学着以往所有的Bloger一样
分开篇章
但是现在还是没有做好侧边栏
所以可能目前想看到不是那么容易
写在前面 重学系列第三弹
哈哈挖坑好多啊
我也不知道为什么这么喜欢挖坑咯
大概是因为我喜欢倒腾着学习形式的变化吧
从一开始的额word总结,到MindNode
再到网页总结方式
越来越多的方式总有一个目的
我想记录
哈哈还是表现欲 &amp;amp; 记录欲的结合呢
加油啦Kesa!
重点  jQuery 的玩法和 Animate的动画 Font Awesome 这个方便的图标库 Bootstrap 的 btn 属性 和 颜色相关的几个 class值 记一个 css 样式优先级的顺序  最弱: 最上面个的 css next: 往后的 css ,若 class 均在同一个对象中出现(与放置顺序无关),越往后的会覆盖掉前面的 next: id id 永远比 class 优先级高 next: 行内 style , 这个比前两者都高  &amp;lt;style&amp;gt; body { background-color: black; font-family: Monospace; color: green; } .</description>
    </item>
    
    <item>
      <title>⭐️Tech#重学C&#43;&#43;</title>
      <link>/2018/03/11/tech-c--/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/11/tech-c--/</guid>
      <description>声明 同Python的重学
这里也是我的重学的C++部分
本来就不会,所以更要认真
ps.如果出现 &amp;ldquo;- 啊哈&amp;rdquo; 那是因为MarkDown的格式问题
在列表代码分支下必须有一个同级分支
否则会格式错误,见谅 那么加油
不会的重点  位运算都不会,下面有,注意事项看pdf printf 和 cin的问题看下面  日志  3.10
 printf的用法  和C一样  printf(&amp;quot;%s You son of Bitch %s\n&amp;quot;, name1, name2);   啊哈  cin &amp;lt;&amp;lt; 和 cin.getline() 的区别
 cin&amp;lt;&amp;lt;是以空格、回车、TAB为输入结束 cin.getline()是以回车为结束  逻辑和位运算的区别
  3.11
 位运算  双目  &amp;amp; 按位 “与” | 按位 “或“ ^ 按位 &amp;ldquo;异或&amp;rdquo; Shift+  &amp;lt;&amp;lt; 左移 &amp;gt;&amp;gt; 右移 格式: &amp;lt;整数类型表达式 1&amp;gt; &amp;lt;位运算符&amp;gt; &amp;lt;整数类型表达式 2&amp;gt;  单目  ~ 按位 &amp;ldquo;取反&amp;rdquo; Shift+  ~ &amp;lt;整数类型表达式&amp;gt;   特殊运算符  赋值运算符  赋值同时是表达式 左值和右值  左值:变量等能被赋值的值 右值:有值的表达式   字节数运算符 sizeof() 求某类型的数据或表达式的值占的字节数 条件运算符  达到条件执行1,不达到执行2 格式: &amp;lt;条件&amp;gt; ?</description>
    </item>
    
    <item>
      <title>⭐️Tech#重学Python</title>
      <link>/2018/03/09/tech-python/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/09/tech-python/</guid>
      <description>Here
写在前面: 本文为长期更新篇,主要是记录一下自己重新学习python的过程
记录内容主要是学习内容和学习心得 以往总是用MindNode
但是感觉以我一个强迫症患者的话 又是记得满满的又懒得重看 还是这样将就一哈
还有一个必须回头做的事情
研究一下边栏怎么做,这种东西日志太多就不好找了
ps.如果出现 &amp;ldquo;- 啊哈&amp;rdquo; 那是因为MarkDown的格式问题
在列表代码分支下必须有一个同级分支
否则会格式错误,见谅
不会的重点  可变参数 &amp;amp; 关键字参数  可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。 关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict 关键在于理解 *list 和 **dict 都是干嘛的  给函数换名字,直接赋函数名给想要替换的另一个函数名,无需 &amp;ldquo;&amp;rdquo;,真TM牛逼 可变对象 和 不可变对象
 对于可变对象的操作是直接作用在对象本身的 &amp;gt;&amp;gt;&amp;gt; a = [&#39;c&#39;, &#39;b&#39;, &#39;a&#39;] &amp;gt;&amp;gt;&amp;gt; a.sort() &amp;gt;&amp;gt;&amp;gt; a [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  而对于不可变对象的操作对对象本身没有影响
而是返回一个复制值再进行操作
 &amp;gt;&amp;gt;&amp;gt; a = &#39;abc&#39; &amp;gt;&amp;gt;&amp;gt; b = a.replace(&#39;a&#39;, &#39;A&#39;) &amp;gt;&amp;gt;&amp;gt; b &#39;Abc&#39; &amp;gt;&amp;gt;&amp;gt; a &#39;abc&#39;  可变对象有: list,dict</description>
    </item>
    
  </channel>
</rss>