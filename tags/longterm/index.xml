<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Longterm on Kesa-Kelog</title>
    <link>/tags/longterm/</link>
    <description>Recent content in Longterm on Kesa-Kelog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/longterm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>⭐️Tech#重学Web_03</title>
      <link>/2018/04/05/tech-web-03/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/05/tech-web-03/</guid>
      <description>不知不觉进入了这个JS的算法世界 相当的不知不觉了
但是还是要继续做下去呀
肯定是做不到一天十个的,应该是有一些难度的
当然啦,我还是会坚持下去的
噶油
重点部分 日志  18.4.5
 Reverse a String
翻转字符串
先把字符串转化成数组，
再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。
你的结果必须得是一个字符串
function reverseString(str) { // 请把你的代码写在这里 var array = \[]; for(var i = 0;i&amp;amp;lt;str.length;i++) { array.push(str[i]); } array.reverse(); str = array.join(&#39;&#39;); return str; }  Factorialize a Number
计算一个整数的阶乘
如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。
阶乘通常简写成 n!
例如: 5! = 1 * 2 * 3 * 4 * 5 = 120
function factorialize(num) { // 请把你的代码写在这里 var res = 1; for (var i = 1;i&amp;lt;=num;i++){ res *= i; } num = res; return num; }  Check for Palindromes</description>
    </item>
    
    <item>
      <title>📚TOFUL#Vocabulary</title>
      <link>/2018/04/05/toful-vocabulary/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/05/toful-vocabulary/</guid>
      <description>Plan According to a table of 词以累计日期安排表
I now will be led to learn words by 词以累计 for at least 42 days
Begin!
Plan table .tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:8px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:8px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-c3ow{font-size:16px;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-us36{border-color:inherit;vertical-align:top}   ﻿第一天 第二天 第三天 第四天   地理 地质 气象 动物学 军事 法律 医学 化学 环境 教育 天文 经济 农业 考古学 人物 人类学 生物学 社会学 数学 物理 艺术 音乐   地理 地质 气象 动物学 军事 地理 地质 气象 动物学 军事 法律 医学 化学 环境 教育 天文 地理 地质 气象 动物学 军事    法律 医学 化学 环境 教育 天文 经济 农业 考古学 人物 经济 农业 考古学 人物      人类学 生物学 社会学 数学 物理 艺术 音乐   第五天 第六天 第七天 第八天   语言学 政治 植物学 自然 宗教 品质 事务 现实1   法律 医学 化学 环境 教育 天文 经济 农业 考古学 人物 人类学 生物学 社会学 数学 物理 艺术 音乐 地理 地质 气象 动物学 军事   人类学 生物学 社会学 数学 物理 艺术 音乐 语言学 政治 植物学 自然 宗教 品质 语言学 政治 植物学 自然 宗教   语言学 政治 植物学 自然 宗教 品质 事务 事务      现实1   第九天 第十天 第十一天 第十二天   现实2 心理 行为1 行为2 语言 属性1   法律 医学 化学 环境 教育 天文 经济 农业 考古学 人物 人类学 生物学 社会学 数学 物理 艺术 音乐 语言学 政治 植物学 自然 宗教   品质 事务 现实1 现实2 心理   现实1 现实2 心理 行为1 行为2   现实2 心理 行为1 行为2 语言 属性1   第十三天 第十四天 第十五天 第十六天   属性2 状态 地理 地质 气象 动物学 军事 法律 医学 化学 环境 教育 天文   品质 事务 现实1 现实2 心理   行为1 行为2 语言 属性1 属性2   语言 属性1 属性2 状态    属性2 状态     第十七天 第十八天 第十九天 第二十天   经济 农业 考古学 人物 人类学 生物学 社会学 数学 物理 艺术 音乐 语言学 政治 植物学 自然 宗教 品质   行为1 行为2 语言 属性1 属性2   状态      第二十一天 第二十二天 第二十三天 第二十四天   事务 现实1 现实2 心理 行为1   状态      第二十五天 第二十六天 第二十七天 第二十八天   行为2 语言 属性1 属性2 状态   第二十九天 第三十天 第三十一天 第三十二天   地理 地质 气象 动物学 军事 法律 医学 化学 环境 教育 天文 经济 农业 考古学 人物 人类学 生物学 社会学 数学 物理 艺术 音乐   现实1 现实2 心理 行为1 行为2   第三十三天 第三十四天 第三十五天 第三十六天   语言学 政治 植物学 自然 宗教 品质 事务 现实1   语言 属性1 属性2 状态    第三十七天 第三十八天 第三十九天 第四十天   现实2 心理 行为1 行为2 语言 属性1   第四十一天 第四十二天     属性2 状态</description>
    </item>
    
    <item>
      <title>⭐️Tech#Ⓤ插件_DoTween</title>
      <link>/2018/03/30/tech-dotween/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/30/tech-dotween/</guid>
      <description>写在前面 P.S. Ⓤ在之后的所有文章中指代 Unity游戏引擎®
谨以此文开启我的知识Blog计划(包括Unity)
以后的所有值得记忆的知识全部都将以这种方式呈现
记录和整理是两回事,但是鉴于我的时间和作风,暂时碰不到整理
所以以此来做每天的日志,分为两部分
按照之前前段学习的习惯
最开始是一个重点难点整理的一个地方,但是只是一个引子
(考虑加入文章内链接以方便快速到达)
另一部分是日志,倒序安排
Begin!!!
重点难点 日志  4.1.2018  可视化编辑:DoTweenAnimation(一个脚本,非常easy) 可视化路劲:DoTweenPath(一个脚本) 卧槽&amp;gt;&amp;gt;&amp;gt;  3.31.2018
 范围内随机摇动
transform.DOShakePosition(DuringTime, shakeRange); 文本变化
text.DOText(&amp;quot;想要显示的内容&amp;quot;, DuringTime); 动画的曲线\类型\循环的次数
参照链接
Tweener tweener_1 = transform.DOLocalMoveX(0, Interval); tweener_1.SetEase(Ease.OutCirc); //动画曲线 //曲线类型很多,具体可见: http://robertpenner.com/easing/easing_demo.html tweener_1.SetLoops(Times); //动画循环次数 tweener_1.OnComplete(OnTweenComplete); //动画结束事件 // 有一个666的做法 /// 可以一句话搞定 Tweener tweener_1 = transform .DOLocalMoveX(0, Interval) .SetEase(Ease.OutCirc) .SetLoops(Times) .OnComplete(OnTweenComplete);  从指定位置移动到当前位置
// 加上from方法以后表示从目标位置移动到当前位置 transform.DOMoveX(targetX, 1).From(); // from (true)是相对坐标移动,不加即绝对坐标移动 transform.DOMoveX(targetX, 1).From(true);  倒放</description>
    </item>
    
    <item>
      <title>🎮Game#ERROR_AI</title>
      <link>/2018/03/19/game-error-ai/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/19/game-error-ai/</guid>
      <description>Game Journal after 校赛  18.4.21  素材:  声音:  BGM:3-5首 ai报警音效 敌人报警音效 D 射击音效 D  激光 shotgun 狙击  机器人动作声音: D  飞碟:靠近后的嗡嗡声 机器人:射击 炮塔:射击   特效:D  爆炸特效(敌人死亡) D 球壳电流特效?? 飞船喷气特效 敌人发现给个提示的特效？  贴图:  火花 D 激光 D shotgun子弹 D    18.4.6  BUGS:  巡逻机器人死亡之后出警告 &amp;ldquo;SetDestination&amp;rdquo; can only be called on an active agent that has been placed on a NavMesh.</description>
    </item>
    
    <item>
      <title>⭐️Tech#重学Web_02</title>
      <link>/2018/03/16/tech-css-02/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/16/tech-css-02/</guid>
      <description>写在前面 目前没有想好多长时间换一次这个版面
大概是一周新开一个CSS的网页吧
那么我就得赶快搞出来咯
基于Tag或者自己往进填链接的方式
估计也就是大概在两周之内学到那个部分吧
噶油
大的方面 &amp;amp; 细节 大方面  JavaScript基础 JSON 正则表达式 面向对象 数组对象的一些函数(map\reduce\filter\sort)  细节  CSS的垂直居中问题  日志  18.4.5-时隔多日:数组对象的方法
 map方法:迭代数组处理每一个(遍历)
 概念:map 方法会迭代数组中的每一个元素，并根据回调函数来处理每一个元素，最后返回一个新数组。注意，这个方法不会改变原始数组。
//在我们的例子中，回调函数只有一个参数，即数组中元素的值 (val 参数) ，但其实，你的回调函数也可以支持多个参数，譬如：元素的索引index、原始数组arr。 //使用 map 方法来为 oldArray 中的每一项增加3，并且在 newArray 中保存它们。 oldArray 不应该被改变。 var oldArray = [1, 2, 3, 4, 5]; // 只能在这一行下面写代码 // 这里是每个在原数组上加3 var newArray = oldArray.map(function(cal) { return cal + 3 }); // 这里是每个在原数组上乘4 var timesFour = oldArray.</description>
    </item>
    
    <item>
      <title>⭐️Tech#重学Web_01</title>
      <link>/2018/03/12/tech-css/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/12/tech-css/</guid>
      <description>飞到日志部分
补充 因为学的东西越来越多了
所以不得已学着以往所有的Bloger一样
分开篇章
但是现在还是没有做好侧边栏
所以可能目前想看到不是那么容易
写在前面 重学系列第三弹
哈哈挖坑好多啊
我也不知道为什么这么喜欢挖坑咯
大概是因为我喜欢倒腾着学习形式的变化吧
从一开始的额word总结,到MindNode
再到网页总结方式
越来越多的方式总有一个目的
我想记录
哈哈还是表现欲 &amp;amp; 记录欲的结合呢
加油啦Kesa!
重点  jQuery 的玩法和 Animate的动画 Font Awesome 这个方便的图标库 Bootstrap 的 btn 属性 和 颜色相关的几个 class值 记一个 css 样式优先级的顺序  最弱: 最上面个的 css next: 往后的 css ,若 class 均在同一个对象中出现(与放置顺序无关),越往后的会覆盖掉前面的 next: id id 永远比 class 优先级高 next: 行内 style , 这个比前两者都高  &amp;lt;style&amp;gt; body { background-color: black; font-family: Monospace; color: green; } .</description>
    </item>
    
    <item>
      <title>⭐️Tech#重学C&#43;&#43;</title>
      <link>/2018/03/11/tech-c--/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/11/tech-c--/</guid>
      <description>声明 同Python的重学
这里也是我的重学的C++部分
本来就不会,所以更要认真
ps.如果出现 &amp;ldquo;- 啊哈&amp;rdquo; 那是因为MarkDown的格式问题
在列表代码分支下必须有一个同级分支
否则会格式错误,见谅 那么加油
不会的重点  位运算都不会,下面有,注意事项看pdf printf 和 cin的问题看下面  日志  3.10
 printf的用法  和C一样  printf(&amp;quot;%s You son of Bitch %s\n&amp;quot;, name1, name2);   啊哈  cin &amp;lt;&amp;lt; 和 cin.getline() 的区别
 cin&amp;lt;&amp;lt;是以空格、回车、TAB为输入结束 cin.getline()是以回车为结束  逻辑和位运算的区别
  3.11
 位运算  双目  &amp;amp; 按位 “与” | 按位 “或“ ^ 按位 &amp;ldquo;异或&amp;rdquo; Shift+  &amp;lt;&amp;lt; 左移 &amp;gt;&amp;gt; 右移 格式: &amp;lt;整数类型表达式 1&amp;gt; &amp;lt;位运算符&amp;gt; &amp;lt;整数类型表达式 2&amp;gt;  单目  ~ 按位 &amp;ldquo;取反&amp;rdquo; Shift+  ~ &amp;lt;整数类型表达式&amp;gt;   特殊运算符  赋值运算符  赋值同时是表达式 左值和右值  左值:变量等能被赋值的值 右值:有值的表达式   字节数运算符 sizeof() 求某类型的数据或表达式的值占的字节数 条件运算符  达到条件执行1,不达到执行2 格式: &amp;lt;条件&amp;gt; ?</description>
    </item>
    
    <item>
      <title>⭐️Tech#重学Python</title>
      <link>/2018/03/09/tech-python/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/09/tech-python/</guid>
      <description>Here
写在前面: 本文为长期更新篇,主要是记录一下自己重新学习python的过程
记录内容主要是学习内容和学习心得 以往总是用MindNode
但是感觉以我一个强迫症患者的话 又是记得满满的又懒得重看 还是这样将就一哈
还有一个必须回头做的事情
研究一下边栏怎么做,这种东西日志太多就不好找了
ps.如果出现 &amp;ldquo;- 啊哈&amp;rdquo; 那是因为MarkDown的格式问题
在列表代码分支下必须有一个同级分支
否则会格式错误,见谅
不会的重点  可变参数 &amp;amp; 关键字参数  可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。 关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict 关键在于理解 *list 和 **dict 都是干嘛的  给函数换名字,直接赋函数名给想要替换的另一个函数名,无需 &amp;ldquo;&amp;rdquo;,真TM牛逼 可变对象 和 不可变对象
 对于可变对象的操作是直接作用在对象本身的 &amp;gt;&amp;gt;&amp;gt; a = [&#39;c&#39;, &#39;b&#39;, &#39;a&#39;] &amp;gt;&amp;gt;&amp;gt; a.sort() &amp;gt;&amp;gt;&amp;gt; a [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  而对于不可变对象的操作对对象本身没有影响
而是返回一个复制值再进行操作
 &amp;gt;&amp;gt;&amp;gt; a = &#39;abc&#39; &amp;gt;&amp;gt;&amp;gt; b = a.replace(&#39;a&#39;, &#39;A&#39;) &amp;gt;&amp;gt;&amp;gt; b &#39;Abc&#39; &amp;gt;&amp;gt;&amp;gt; a &#39;abc&#39;  可变对象有: list,dict</description>
    </item>
    
  </channel>
</rss>